#ifndef CALL_STACK_STATE_H
#define CALL_STACK_STATE_H

#include "stmap.h"

typedef struct Frame {
    // The address of the return address of the frame.
    uint64_t ret_addr;
    // The base pointer.
    unw_word_t bp;
    // The 16 registers recorded for each frame.
    unw_word_t *registers;
    // The stack map record which correspond to this call.
    stack_map_record_t record;
    uint64_t size;
} frame_t;

// The state of the call stack.
typedef struct CallStackState {
    frame_t *frames;
    uint32_t depth;
    // The return address of main
    uint64_t main_ret_addr;
    // The BP of main
    uint64_t main_bp;
} call_stack_state_t;

typedef struct RestoredStackSegment {
    uint64_t start_addr;
    uint64_t total_size;
    uint64_t size;
} restored_segment_t;

/*
 * Return the state of the call stack.
 */
call_stack_state_t* get_call_stack_state(unw_cursor_t cursor,
                                         unw_context_t context);

void free_call_stack_state(call_stack_state_t *state);

call_stack_state_t* get_restored_state(stack_map_t *sm, uint64_t ppid,
    uint64_t callback_ret_addr, uint64_t end_addr);

void insert_real_addresses(call_stack_state_t *state, restored_segment_t seg,
        uint64_t last_bp, uint64_t last_ret_addr);

/*
 * Return all the locations recorded in the stack map `sm` for each of
 * the frames in `state`. The direct locations need to be restored later.
 */
size_t get_locations(stack_map_t *sm, call_stack_state_t *state,
                     uint64_t **locs);

/*
 * Restore the values in each of the stack frames stored in `state`.
 */
void restore_unopt_stack(stack_map_t *sm, call_stack_state_t *state);

/*
 * Attempts to restore the register state of the last frame, using the
 * information in `state`.
 */
void restore_register_state(call_stack_state_t *state, uint64_t r[]);

/*
 * Collects the stackmap record associated with each frame in `state`.
 *
 * Each frame has a record associated with it, which is generated by the
 * stackmap call that marks the callsite which produced the frame.
 */
void collect_map_records(call_stack_state_t *state, stack_map_t *sm);

/*
 * Construct a state which represents the frames in `dest` followed by those in
 * `state`.
 */
void combine_states(call_stack_state_t *dest, call_stack_state_t *state);

#endif // CALL_STACK_STATE_H
